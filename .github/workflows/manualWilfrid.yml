name: Playwright manual Tests
on:
    workflow_dispatch:
        inputs:
            testName:
                description: 'Test CDM number (CDM-XXXX)'
                required: true
                type: string
            projectName:
                description: 'pom / pcm / api'
                required: true
                type: string

env:
  VAULT_ADDR: https://vault.factory.adeo.cloud
  VAULT_NAMESPACE: adeo/playwright
  PATH_TO_SECRETS: playwright

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  # SECURITY: SECRET DETECTION
  security-detect-secrets-scan:
    name: üîí Scan for secret
    uses: adeo/dxp--reusable-github-actions-workflows/.github/workflows/security-detect-secrets-scan.yml@v1
    with:
      exclude-file-list: (.git/FETCH_HEAD|package-lock.json)

  eslint:
    name: üîé Run ESLint
    timeout-minutes: 30
    runs-on: [self-hosted, Linux, standard]
    steps:
        - uses: actions/checkout@v3
        - uses: adeo/vault-action@v1
          with:
              exportToken: true
              vault-namespace: ${{ env.VAULT_NAMESPACE }}
              vault-jwt-role-name: ${{ github.event.repository.name }}
              vault-secrets: |
                  secret/data/_services/jfrog reader_user_auth_token | JFROG_READER_AUTH_TOKEN ;
        - uses: actions/setup-node@v3
          with:
              node-version: 20
        - name: Install dependencies
          run: npm install
        - name: Run ESLint
          run: npx eslint .


  setup-and-run-tests:
    name: üéÆ GUI Tests ${{ github.event.inputs.projectName }} on  ${{ matrix.bu }}-${{ matrix.env-name }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        bu: ["lmfr", "lmes"]
        env-name: ["uat"]
        exclude:
          - bu: lmes
            env-name: uat
    steps:
      - name: üîê Get secrets from Vault
        id: import-secrets
        uses: adeo/vault-action@v1
        with:
          exportToken: true
          vault-namespace: ${{ env.VAULT_NAMESPACE }}
          vault-jwt-role-name: ${{ github.event.repository.name }}
          vault-secrets: | # pragma: allowlist secret
            secret/data/_services/jfrog reader_user_auth_token | JFROG_READER_AUTH_TOKEN ;
            secret/data/playwright/ci JIRA_TOKEN | JIRA_TOKEN ;
            secret/data/playwright/ci SLACK_OAUTH_TOKEN | SLACK_OAUTH_TOKEN ;
            secret/data/playwright/ci SLACK_CHANNEL_ID | SLACK_CHANNEL_ID;

      - name: ‚¨áÔ∏è Checkout the latest code
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏è install node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps
        
      - name: üéÆ ${{ matrix.bu }} ${{ matrix.env-name }} - Run GUI Playwright tests on ${{ github.event.inputs.testName }}
        run: DEBUG=pw:api,pw:protocol CONTEXT=${{ matrix.bu }}-${{ matrix.env-name }} npx playwright test --project=${{github.event.inputs.projectName}} --grep-invert @skip --grep "${{ github.event.inputs.testName }}"
        if: always()

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
            name: results-${{ matrix.bu }}-${{ matrix.env-name }}.json
            path: ./reports/results-${{ matrix.bu }}-${{ matrix.env-name }}.json
            retention-days: 1

      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 10

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          allow_empty_commit: true

      - name: Generate summary results
        if: always()
        continue-on-error: true
        id: generate-summary
        run: CONTEXT=${{ matrix.bu }}-${{ matrix.env-name }} npx ts-node ./helpers/slack/generateSummary.ts

      - name: Read summary results
        if: always()
        id: read-summary
        shell: bash --noprofile --norc -exo pipefail {0} 
        run: |
          content=$(cat summaryResults-${{ matrix.bu }}-${{ matrix.env-name }}.json | jq -r tostring)
          if jq -e . >/dev/null 2>&1 <<<"$content"; then
            echo "summary=$content" >> $GITHUB_OUTPUT
          else
            echo "Invalid JSON content"
            exit 1
          fi

      - name: Post to a Slack channel
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üé≠ Playwright E2E Test Results",
                    "emoji": true
                  }
                }, 
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *${{ fromJson(steps.read-summary.outputs.summary).passed }}* | ‚ùå *${{ fromJson(steps.read-summary.outputs.summary).failed }}* | üõë *${{ fromJson(steps.read-summary.outputs.summary).aborted }}* | ‚ùÑÔ∏è *${{ fromJson(steps.read-summary.outputs.summary).flaky }}* | ‚è© *${{ fromJson(steps.read-summary.outputs.summary).skipped }}*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ matrix.bu }}* - *${{ matrix.env-name }}*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üìä *${{ steps.allure-report.outputs.allure_report }}*"
                  }
                }
              ]
            }    
        env:
          SLACK_BOT_TOKEN: ${{secrets.SLACK_OAUTH_TOKEN}}